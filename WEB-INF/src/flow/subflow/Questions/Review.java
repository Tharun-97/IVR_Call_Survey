package flow.subflow.Questions;

import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.util.Properties;

import com.avaya.sce.runtime.tracking.TraceInfo;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing
 * mathematic operations, and collection iteration), conditional evaluation to
 * control callflow execution based on variable values, and logging/tracing
 * statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted. If no "true"
 * conditions are encountered, then all data actions will be executed/evaluated
 * and the application will proceed to the "Default" servlet. Last generated by
 * Orchestration Designer at: 2022-DEC-08 03:26:23 PM
 */
public class Review extends com.avaya.sce.runtime.Data {

	// {{START:CLASS:FIELDS
	// }}END:CLASS:FIELDS

	/**
	 * Default constructor Last generated by Orchestration Designer at: 2022-DEC-08
	 * 03:26:23 PM
	 */

	@Override
	public void requestBegin(SCESession mySession) {

		try {
			FileInputStream f = new FileInputStream("D:/IVR Projects/CallSurvey/data/JDBC.properties");

			Properties p = new Properties();
			p.load(f);
			
			String url=p.getProperty("url"); 
			String username=p.getProperty("username");
			String password=p.getProperty("password");
			
			Connection con = null;
			
			try {
				
				Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver").newInstance();
				con = DriverManager.getConnection(url,username,password);
			} catch(Exception e2) {
				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "exception occoured in connection creation"+e2.getMessage(), mySession);
			}

			Statement st = con.createStatement();
			
			st.execute("insert into survey_response(customer_name,question1,question2,question3,question4)values('Tharun','good','bad','average','good')");		
			
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Database accessed succesfully", mySession);
			
			f.close();
			con.close();
			st.close();
			
		} catch (Exception e) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "exception occoured", mySession);
		}

	}

	public Review() {
		// {{START:CLASS:CONSTRUCTOR
		super();
		// }}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2022-DEC-22  05:08:13 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("Questions-Rating", "Default");
		next.setDebugId(95);
		return next;
	}

	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2022-DEC-22  05:08:13 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}

	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2022-DEC-22  05:08:13 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(5);
		actions.add(new com.avaya.sce.runtime.varoperations.Add("Rating:value1", "question1:value", false, "question2:value", false).setDebugId(97));
		actions.add(new com.avaya.sce.runtime.varoperations.Add("Rating:value2", "question3:value", false, "question4:value", false).setDebugId(98));
		actions.add(new com.avaya.sce.runtime.varoperations.Add("Rating:value3", "Rating:value1", false, "Rating:value2", false).setDebugId(99));
		actions.add(new com.avaya.sce.runtime.varoperations.Divide("Rating:value4", "Rating:value3", false, "Rating:value5", false).setDebugId(100));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
